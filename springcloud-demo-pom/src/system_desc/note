参考资料：
    1.https://blog.csdn.net/forezp/article/details/70148833

IDEA启动多个实例参考：
    1.https://blog.csdn.net/forezp/article/details/76408139


应用启动顺序:
1.springcloud-demo-eurekaservice
2.springcloud-demo-config-server
3.springcloud-demo-eurekaclient1
4.springcloud-demo-mvcservice
5.springcloud-demo-zuul
6.springcloud-demo-gateway


=应用服务集群搭建说明：
============================================================================
1.springcloud-demo-eurekaservice:
    1.注册中心【应用服务的注册中心】
    2.访问路径   http://localhost:8761
    3.使用组件
        【  @EnableEurekaServer 】: 注册中心
    4.集群部署:【成千上万个服务向它注册】
        1.  高可用的配置如何搭建   https://blog.csdn.net/forezp/article/details/81041101  【就不做演示了】


2.springcloud-demo-eurekaclient1:
    1.业务服务1-增删查改【模拟服务1】
    2.访问路径   http://localhost:8081/mvc2-service/demo/query?personId=1
    3.使用组件
        1.【  @@EnableEurekaClient 】: 向服务中心注册服务
    4.服务间调用方式


3.springcloud-demo-mvcservice:
    1.业务服务2-增删查改【模拟服务2】
    2.访问路径   http://localhost:8080/mvc-service/demo/query?mathId=1
    3.使用组件
        1.【  @EnableEurekaClient  】//向服务中心注册一个【服务】
        2.【  @EnableDiscoveryClient  】:【服务调用】【@LoadBalanced 负载均衡】 向服务中心注册一个【ribbon】【服务间的调用模式：ribbon+restTemplate】
        3.【  @EnableFeignClients  】:【服务调用】开启Fegin的功能【服务间调用模式：Fegin】
        4.【  @EnableHystrix  】:【熔断器开启】【Feign自己也是带断路器的】
    4.服务间调用方式
    5.服务配置获取
        1.从配置中心获取配置，配置文件修改为 bootstrap.yml 【加载优先级：bootstrap.yml>application.yml】


4.springcloud-demo-pom:
    1.主pom



=网关集群搭建说明：
========================================================================
5.springcloud-demo-zuul:
    1.网关服务
    2.访问路径
        //自身服务：
        0.http://localhost:8083/demo/query

        //mvcservice 服务网关：
        1.http://localhost:8083/api-mvc/demo/queryPersonByFeignCall?personId=1
        2.http://localhost:8083/api-mvc/mvc-service/demo/query?mathId=1&token=dsjhaohgalkshgfas

        //eurekaclient1 服务网关：
        3.http://localhost:8083/springcloud-demo-eurekaclient1/mvc2-service/demo/query?mathId=1

    3.使用组件
        1.【 @EnableZuulProxy 】:【服务网关】
        2.【 】

    4.网关服务配置



=配置中心集群搭建说明：
=================================================================================
6.springcloud-demo-config-git
    1.存配置文件维护--便于维护项目的配置，做成了一个项目，便于随时提交配置
    2.访问路径
        https://github.com/516516/springcloud-demo
    3.使用组件
        无
    4.配置项具体配置规则
         1.springcloud-demo-mvcservice-dev.properties   : 项目名.环境.properties

7.spirngcloud-demo-config-service
    1.配置中心
    2.访问路径  http://localhost:8084/springcloud-demo-mvcservice/dev
    3.使用组件
        1.【 @EnableConfigServer 】注册Config Server
        2.【 @EnableEurekaClient 】//向服务中心注册一个【服务】【集群部署】
    4.配置中心服务配置



=暂时略过  消息总线   RocketMQ部分：https://blog.csdn.net/weixin_42073629/article/details/106535326
================================================================================



=服务链路追踪
=下载 zipkin-server   https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/
================================================================================
    1.链路追踪服务
    2.访问路径：http://127.0.0.1:9411/
    3.使用组件
        1.【 zipkin-server 】:直接下载使用、目前放在  springcloud-demo-pom\src\zipkin-server下
        2.启动命令：
    4.配置中心【需要链路追踪的服务配置文件中添加配置】【具体配置查看服务】



=断路器监控【单个系统的断路器监控】
=================================================================================
8.springcloud-demo-trubine
    1.断路器监控【springcloud-demo-mvcservice】【单应用监控】
    2.访问路径：
        1.http://localhost:8080/mvc-service/hystrix
        输入参数：
        1.http://localhost:8080/mvc-service/actuator/hystrix.stream
        2.2000ms
        3.应用名称：springcloud-demo-mvcservice

        4.测试访问接口：
            1.http://localhost:8080/mvc-service/demo/queryPersonByHystricCall?personId=1

    3.使用组件
        1.【 @EnableHystrixDashboard 】//断路器监控功能开启
        2.【 @HystrixCommand 】//断路器
    4.配置中心
        参考服务springcloud-demo-mvcservice pom文件配置



    1.断路器监控【springcloud-demo-eurekaclient1】【单应用监控】
    2.访问路径：
        1.http://localhost:8081/mvc2-service/hystrix
        输入参数：
        1.http://localhost:8081/mvc2-service/actuator/hystrix.stream
        2.2000ms
        3.应用名称：springcloud-demo-eurekaclient1

        4.测试访问接口：
            1.http://localhost:8081/mvc2-service/demo/queryWithHystrix?mathId=1

    3.使用组件
        1.【 @EnableHystrixDashboard 】//断路器监控功能开启
        2.【 @HystrixCommand 】//断路器
    4.配置中心
        参考服务springcloud-demo-eurekaclient1 pom文件配置



=断路器聚合监控【整个系统的断路器监控】【搭建失败】【依旧搭建失败】
=================================================================================
    1.断路器聚合监控【开启断路器的所有系统均可监控】
    2.访问路径
        1.http://localhost:8080/mvc-service/hystrix
        2.输入参数：
        http://localhost:8080/mvc-service/turbine.stream
        1.http://localhost:8080/mvc-service/turbine.stream
        2.2000ms
        3.eee
    3.使用组件
        1.【 @EnableTurbine 】开启应用断路器聚合监控
        2.【 @HystrixCommand 】//断路器框开启
    4.配置中心



=Spring Cloud Gateway  网关
=================================================================================
9.springcloud-demo-gateway

    1.网关服务 -- 替代zuul   作用：【路由转发、权限校验、限流控制】
        1.网关的作用：
            1.协议转换，路由转发【参考第2点】
            2.流量聚合，对流量进行监控，日志输出
            3.作为整个系统的前端工程，对流量进行控制，有限流的作用
            4.作为系统的前端边界，外部流量只能通过网关才能访问系统
            5.可以在网关层做权限的判断
            6.可以在网关层做缓存

    2.predicate 【路由匹配的几种规则】
        【SpringcloudDemoGatewayApplication】
            1. http://localhost:8086/mvc-service/demo/index
        【application.yml  after_route：】
            1.http://localhost:8086/mvc-service/demo/query?mathId=1
        【application.yml  header_route：】
            1.http://localhost:8086/mvc-service/demo/query?mathId=1
        【application.yml  cookie_route：】【postman中Cookie设置：Header-->Cookie-->name=bobo】
            1.http://localhost:8086/mvc-service/demo/query?mathId=1
        【application.yml  host_route：】【postman中Host设置：Header-->Host-->www.boubou.com】
            1.http://localhost:8086/mvc-service/demo/query?mathId=1
        【application.yml  method_route：】
            1.http://localhost:8086/mvc-service/demo/query?mathId=1
        【application.yml  path_route：】
            1.http://localhost:8086/mvc-service/demo/query?mathId=1
        【application.yml  query_route：】
            1.http://localhost:8086/mvc-service/demo/query?mathId=1

    3.filter过滤器的使用【服务边界】【Spring Cloud Gateway内置了【19种】强大的过滤器工厂】【自己定义自己的过滤器】
        源码部分：【org.springframework.cloud.gateway.filter.factory】
        【类型：】
            -2.“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换
            -1.在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等
        【作用范围：】
            1.GlobalFilter：全局过滤器
                1.全局过滤器，不需要在配置文件中配置，作用在所有的路由上
                2.通过GatewayFilterAdapter包装成GatewayFilterChain可识别的过滤器
                3.相关全局过滤器，参考： https://blog.csdn.net/forezp/article/details/85057268
                4.自定义全局过滤器
            2.GatewayFilter：
                1.需要通过spring.cloud.routes.filters 配置在具体路由下，只作用在当前路由上
                2.或通过spring.cloud.default-filters配置在全局，作用在所有路由上

        【请求路径：】
        【application.yml  add_request_header_route：】
            1.http://localhost:8086/mvc-service/demo/query?mathId=1
        【application.yml  rewritepath_route：】
            1.http://localhost:8086/mvc/mvc-service/demo/query?mathId=1
        【自定义过滤器 filter：customerRouteLocator 】【@Bean的方式  实例化过滤器Bean】
        【自定义过滤器工厂】【 RequestTimeGatewayFilterFactory 】
        【全局过滤器】
            0.定义：
                1.参考：TokenFilter
            1.请求路径：
                1.http://localhost:8086/mvc-service/demo/query?mathId=1&token=123

    4.使用组件
    5.相关配置 -- 参考 springcloud-demo-gateway


==Spring Cloud Gateway  网关--限流篇
=================================================================================
    1.限流：
        1.大量的请求使服务器过载，导致服务不可用
        2.防止网络攻击
    2.一般限流都是在网关这一层做：
        比如Nginx、Openresty、kong、zuul、Spring Cloud Gateway等
    3.常见的限流算法：
        1.计数器算法
            1.实现方式：
                1.第一个请求进来开始计时，在接下去的1s内，每来一个请求，就把计数加1，如果累加的数字达到了100，那么后续的请求就会被全部拒绝。
                2.AtomicLong#incrementAndGet()方法来给计数器加1并返回最新值，通过这个最新值和阈值进行比较。
            2.【优点缺点】：“突刺现象”----1s内的前10ms，已经通过了100个请求，那后面的990ms，只能眼巴巴的把请求拒绝

        2.漏桶算法
            1.思想：不管服务调用方多么不稳定，通过漏桶算法进行限流，每10毫秒处理一次请求。
            2.实现：准备一个队列，用来保存请求，另外通过一个线程池（ScheduledExecutorService）来定期从队列中获取请求并执行，可以一次性获取多个并发执行。
            3.优点：消除"突刺现象"
            4.缺点：无法应对短时间的突发流量

        3.令牌桶算法
            1.思想：漏桶算法的一种改进，桶算法能够限制请求调用的速率，而令牌桶算法能够在【限制调用的平均速率的同时还允许一定程度的突发调用】
            2.实现：可以准备一个队列，用来保存令牌，另外通过一个线程池定期生成令牌放到队列中，每来一个请求，就从队列中获取一个令牌，并继续执行。